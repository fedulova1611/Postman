HW 3 Postman

http://162.55.220.72:5005/first
1. Отправить запрос.
2. Статус код 200
3. Проверить, что в body приходит правильный string.

//2.Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

//3.Проверить, что в body приходит правильный string.
pm.test("Body matches string", function () {
    pm.expect(pm.response.text()).to.include("This is the first responce from server!");
});


http://162.55.220.72:5005/user_info_3
1. Отправить запрос.
2. Статус код 200
3. Спарсить response body в json.
4. Проверить, что name в ответе равно name s request (name вбить руками.)
5. Проверить, что age в ответе равно age s request (age вбить руками.)
6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)
7. Спарсить request.
8. Проверить, что name в ответе равно name s request (name забрать из request.)
9. Проверить, что age в ответе равно age s request (age забрать из request.)
10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)
11. Вывести в консоль параметр family из response.
12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)

//2. Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

// 3. Спарсить response body в json.
let jsonData = pm.response.json();

//4. Проверить, что name в ответе равно name s request (name вбить руками.)
pm.test("Your test name", function () {
    pm.expect(jsonData.name).to.eql("Tatyana");
});

//5. Проверить, что age в ответе равно age s request (age вбить руками.)
pm.test("Your age", function () {
    pm.expect(jsonData.age).to.eql("36");
});

//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)
pm.test("Salary", function () {
    pm.expect(jsonData.salary).to.eql(500);
});

//7. Спарсить request.
let req_name= request.data.name

//8. Проверить, что name в ответе равно name s request (name забрать из request.)
pm.test("Your test name2", function () {
    pm.expect(jsonData.name).to.eql(request.data.name);
});

//9. Проверить, что age в ответе равно age s request (age забрать из request.)
pm.test("Your age2", function () {
    pm.expect(jsonData.age).to.eql(request.data.age);
});

//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)
let req_salary= +request.data.salary
pm.test("Your salary2", function () {
    pm.expect(jsonData.salary).to.eql(req_salary);
});

//11. Вывести в консоль параметр family из response.
let family  = pm.response.json();
console.log(family.family);

//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)
let salary = +request.data.salary;
let u_salary_1_5_year = jsonData.family.u_salary_1_5_year;
console.log(jsonData.family.u_salary_1_5_year);

pm.test("Test u_salary_1_5_year", function () {
    pm.expect(u_salary_1_5_year).to.eql(salary*4);
});



http://162.55.220.72:5005/object_info_3
1. Отправить запрос.
2. Статус код 200
3. Спарсить response body в json.
4. Спарсить request.
5. Проверить, что name в ответе равно name s request (name забрать из request.)
6. Проверить, что age в ответе равно age s request (age забрать из request.)
7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)
8. Вывести в консоль параметр family из response.
9. Проверить, что у параметра dog есть параметры name.
10. Проверить, что у параметра dog есть параметры age.
11. Проверить, что параметр name имеет значение Luky.
12. Проверить, что параметр age имеет значение 4.




//2. Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});
//3. Спарсить response body в json.
let jsonData = pm.response.json();

//4. Спарсить request.
var query = {};
pm.request.url.query.all().forEach((param) => { query[param.key] = param.value});
console.log(query);

// или var name = pm.request.url.querry.get('name')
//console.log(name);
// или let reqBody=pm.request.url.query.toObject();
// или let reqтфьу=pm.request.url.query.toObject().name;

//5. Проверить, что name в ответе равно name s request (name забрать из request.)
pm.test("Check name", function () {
   pm.expect(jsonData.name).to.eql(query.name);
});

//6. Проверить, что age в ответе равно age s request (age забрать из request.)
pm.test("Check age", function () {
   pm.expect(jsonData.age).to.eql(query.age);
});

//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)
pm.test("Check salary", function () {
   pm.expect(jsonData.salary).to.eql(+query.salary);
});

//8. Вывести в консоль параметр family из response.
console.log(jsonData.family);

//9.Проверить, что у параметра dog есть параметры name.
pm.test("property name", function () {
pm.expect(jsonData.family.pets.dog).to.have.property("name");
});

//10. Проверить, что у параметра dog есть параметры age.
pm.test("property age", function () {
pm.expect(jsonData.family.pets.dog).to.have.property("age");
});

//11.Проверить, что параметр name имеет значение Luky.
pm.test("name == Luky", function () {
    pm.expect(String(jsonData.family.pets.dog.name)).to.include("Luky");
});

//12.Проверить, что параметр age имеет значение 4.
pm.test("age == 4", function () {
    pm.expect(String(jsonData.family.pets.dog.age)).to.include("4");
});	
http://162.55.220.72:5005/object_info_4
1. Отправить запрос.
2. Статус код 200
3. Спарсить response body в json.
4. Спарсить request.
5. Проверить, что name в ответе равно name s request (name забрать из request.)
6. Проверить, что age в ответе равно age из request (age забрать из request.)
7. Вывести в консоль параметр salary из request.
8. Вывести в консоль параметр salary из response.
9. Вывести в консоль 0-й элемент параметра salary из response.
10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.
11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.
12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)
13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)
14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)
15. Создать в окружении переменную name
16. Создать в окружении переменную age
17. Создать в окружении переменную salary
18. Передать в окружение переменную name
19. Передать в окружение переменную age
20. Передать в окружение переменную salary
21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.

//2. Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

//3. Спарсить response body в json.
let jsonData = pm.response.json();

//4. Спарсить request.
var query = {};
pm.request.url.query.all().forEach((param) => { query[param.key] = param.value});
console.log(query);

//5. Проверить, что name в ответе равно name s request (name забрать из request.)
pm.test("Check name", function () {
   pm.expect(jsonData.name).to.eql(query.name);
});

//6.Проверить, что age в ответе равно age из request (age забрать из request.)
pm.test("Check age", function () {
   pm.expect(jsonData.age).to.eql(+query.age);
});

//7.Вывести в консоль параметр salary из request.
console.log(query.salary);

//8.Вывести в консоль параметр salary из response.
console.log(jsonData.salary);

//9.Вывести в консоль 0-й элемент параметра salary из response.
console.log(jsonData.salary[0]);

//10.Вывести в консоль 1-й элемент параметра salary параметр salary из response.
console.log(jsonData.salary[1]);

//11.Вывести в консоль 2-й элемент параметра salary параметр salary из response.
console.log(jsonData.salary[2]);

//12.Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)
pm.test("Check salary", function () {
   pm.expect(jsonData.salary[0]).to.eql(+query.salary);
});

//13.Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)
pm.test("Check salary 1", function () {
   pm.expect(+jsonData.salary[1]).to.eql(+query.salary*2);
});

//14.Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)
pm.test("Check salary 2", function () {
   pm.expect(+jsonData.salary[2]).to.eql(+query.salary*3);
});

//15. Создать в окружении переменную name
pm.environment.set("name", jsonData.name);

//16. Создать в окружении переменную age
pm.environment.set("age", jsonData.age);

//17. Создать в окружении переменную salary
pm.environment.set("salary", jsonData.salary);

//18. Передать в окружение переменную name
//19.Передать в окружение переменную age
//20.Передать в окружение переменную salary
//21.Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.
for (let i in Object.values(jsonData.salary)){
     console.log(Object.values(jsonData.salary)[i])
 }

http://162.55.220.72:5005/user_info_2
1. Вставить параметр salary из окружения в request
2. Вставить параметр salary из окружения в age
3. Вставить параметр salary из окружения в name
4. Отправить запрос.
5. Статус код 200
6. Спарсить response body в json.
7. Спарсить request.
8. Проверить, что json response имеет параметр start_qa_salary
9. Проверить, что json response имеет параметр qa_salary_after_6_months
10. Проверить, что json response имеет параметр qa_salary_after_12_months
11. Проверить, что json response имеет параметр qa_salary_after_1.5_year
12. Проверить, что json response имеет параметр qa_salary_after_3.5_years
13. Проверить, что json response имеет параметр person
14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)
15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)
16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)
17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)
18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)
19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)
20. Проверить, что что параметр u_age равен age из request (age забрать из request.)
21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)
22. Написать цикл который выведет в консоль по порядку элементы списка из параметра person.

//1.Вставить параметр salary из окружения в request
//2. Вставить параметр salary из окружения в age
//3. Вставить параметр salary из окружения в name
//4. Отправить запрос.
//5. Статус код 200
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

// 6. Спарсить response body в json.
let jsonData = pm.response.json();

//7.Спарсить request.
let req= request.data;

//8.Проверить, что json response имеет параметр start_qa_salary
pm.test("start_qa_salary", function () {
pm.expect(jsonData).to.have.property("start_qa_salary");
});

//9.Проверить, что json response имеет параметр qa_salary_after_6_months
pm.test("qa_salary_after_6_months", function () {
pm.expect(jsonData).to.have.property("qa_salary_after_6_months");
});

//10.Проверить, что json response имеет параметр qa_salary_after_12_months
pm.test("qa_salary_after_12_months", function () {
pm.expect(jsonData).to.have.property("qa_salary_after_12_months");
});

//11.Проверить, что json response имеет параметр qa_salary_after_1.5_year
pm.test("qa_salary_after_1.5_year", function () {
pm.expect(jsonData).to.have.property("qa_salary_after_1.5_year");
});

//12.Проверить, что json response имеет параметр qa_salary_after_3.5_years
pm.test("qa_salary_after_3.5_years", function () {
pm.expect(jsonData).to.have.property("qa_salary_after_3.5_years");
});

//13. Проверить, что json response имеет параметр person
pm.test("property person", function () {
pm.expect(jsonData).to.have.property("person");
});

//14.Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)
let req_salary= request.data.salary
pm.test("start_qa_salary", function () {
    pm.expect(jsonData.start_qa_salary).to.eql(+req_salary);
});

//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)
pm.test("qa_salary_after_6_months", function () {
    pm.expect(jsonData.qa_salary_after_6_months).to.eql(+req_salary*2);
});

//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)
pm.test("qa_salary_after_12_months", function () {
    pm.expect(jsonData.qa_salary_after_12_months).to.eql(+req_salary*2.7);
});

//17. Проверить, что параметр qa_salary_after_1.5_years равен salary*3.3 из request (salary забрать из request.)
pm.test("qa_salary_after_1.5_year", function () {
    pm.expect(jsonData["qa_salary_after_1.5_year"]).to.eql(+req_salary*3.3);
});

//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)
pm.test("qa_salary_after_3.5_years", function () {
    pm.expect(jsonData["qa_salary_after_3.5_years"]).to.eql(+req_salary*3.8);
});

//19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)
pm.test("person salary", function () {
    pm.expect(jsonData.person.u_name[1]).to.eql(+req_salary);
});

//20.Проверить, что что параметр u_age равен age из request (age забрать из request.)
pm.test("age u_age", function () {
    pm.expect(jsonData.person.u_age).to.eql(+req.age);
});

//21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)
pm.test("u_salary_5_years", function () {
    pm.expect(jsonData.person.u_salary_5_years).to.eql(+req.salary*4.2);
});

//22.Написать цикл который выведет в консоль по порядку элементы списка из параметра person
for (let i in Object.values(jsonData.person)){
    console.log(Object.values(jsonData.person)[i])
}
