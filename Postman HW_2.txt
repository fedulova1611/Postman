HW_2 Postman
=====

=====

1) необходимо залогиниться
POST
http://162.55.220.72:5005/login
login : str (кроме /)
password : str

Приходящий токен необходимо передать во все остальные запросы.
var jsonData = pm.response.json();
pm.environment.set("token", jsonData.token);

===================
дальше все запросы требуют наличие токена.
===================

2) http://162.55.220.72:5005/user_info
req. (RAW JSON)
POST
age: int
salary: int
name: str
auth_token


resp.
{'start_qa_salary':salary,
 'qa_salary_after_6_months': salary * 2,
 'qa_salary_after_12_months': salary * 2.9,
 'person': {'u_name':[user_name, salary, age],
                                'u_age':age,
                                'u_salary_1.5_year': salary * 4}
                                }

Тесты:
1)	Статус код 200
let jsonData = pm.response.json();
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});


2)	Проверка структуры json в ответе.
let schema = {

}
pm.test('Schema is valid', function () {
    pm.expect(tv4.validate(jsonData, schema)).to.be.true;
});

3)	В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.
let salary_req = JSON.parse(request.data).salary;
let salary_resp = jsonData.start_qa_salary;
let salary_resp_6 = jsonData.qa_salary_after_6_months;
let salary_resp_12 = jsonData.qa_salary_after_12_months;
let salary_resp_1_5 = jsonData.person.u_salary_1_5_year;

pm.test("Check_salary_start", function () {
    var jsonData = pm.response.json();
    pm.expect(salary_req).to.eql(salary_resp);
});

pm.test("Check_salary_after_6_months", function () {
    var jsonData = pm.response.json();
    pm.expect(salary_req * 2).to.eql(salary_resp_6);
});

pm.test("Check_salary_after_12_months", function () {
    var jsonData = pm.response.json();
    pm.expect(salary_req * 2.9).to.eql(salary_resp_12);
});

pm.test("Check_salary_after_1_5_year", function () {
    var jsonData = pm.response.json();
    pm.expect(salary_req * 4).to.eql(salary_resp_1_5);
});

2 вариант
let qa_salary_req=jsonData.person.u_name[1];
let qa_salary_1_5_year=jsonData.person.u_salary_1_5_year;
let qa_salary_after_12_months=jsonData.qa_salary_after_12_months;
let qa_salary_after_6_months=jsonData.qa_salary_after_6_months;
let qa_start_salary=jsonData.start_qa_salary;

pm.test("Salary_start", function () {
    var jsonData = pm.response.json();
    pm.expect(qa_start_salary).to.eql(qa_salary_req);
});

pm.test("Salary_1_5_year", function () {
    var jsonData = pm.response.json();
    pm.expect(qa_salary_1_5_year).to.eql(qa_salary_req*4);
});

pm.test("Salary_after_12_months", function () {
    var jsonData = pm.response.json();
    pm.expect(qa_salary_after_12_months).to.eql(qa_salary_req*2.9);
});

pm.test("Salary_after_6_months", function () {
    var jsonData = pm.response.json();
    pm.expect(qa_salary_after_6_months).to.eql(qa_salary_req*2);
});

4) Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user
pm.environment.set("salary", jsonData.person.u_salary_1_5_year);

3) http://162.55.220.72:5005/new_data

req.
POST
age: int
salary: int
name: str
auth_token

Resp.
{'name':name,
  'age': int(age),
  'salary': [salary, str(salary*2), str(salary*3)]}

Тесты:
1) Статус код 200
2) Проверка структуры json в ответе.
3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.
let salary = jsonData.salary[0]
let salary_2 = parseInt(jsonData.salary[1])
let salary_3 = +jsonData.salary[2]

//console.log("salary = ", salary, typeof(salary));
//console.log("salary_2 = " + salary_2, typeof(salary_2));
//console.log("salary_3 = ", salary_3, typeof(salary_3));
//console.log("salary_3_numb = ", parseInt(salary_3), typeof(parseInt(salary_3)));

pm.test("Check salary", function () {
    var jsonData = pm.response.json();
    pm.expect(jsonData.salary[0]).to.eql(salary);
});

pm.test("Check salary_2", function () {
    var jsonData = pm.response.json();
    pm.expect(salary_2).to.eql(salary_2);
});

pm.test("Check salary_3", function () {
    var jsonData = pm.response.json();
    pm.expect(salary_3).to.eql(salary_3);
});

4) проверить, что 2-й элемент массива salary больше 1-го и 0-го
===================

4) http://162.55.220.72:5005/test_pet_info

req.
POST
age: int
weight: int
name: str
auth_token


Resp.
{'name': name,
 'age': age,
 'daily_food':weight * 0.012,
 'daily_sleep': weight * 2.5}


Тесты:
1) Статус код 200
2) Проверка структуры json в ответе.
3) В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.

pm.test("Check_daily_food", function () {
    var jsonData = pm.response.json();
    pm.expect(jsonData.daily_food).to.eql(request.data.weight*0.012);
});

pm.test("Check_daily_sleep", function () {
    var jsonData = pm.response.json();
    pm.expect(jsonData.daily_sleep).to.eql(request.data.weight*2.5);
});


===================

5) http://162.55.220.72:5005/get_test_user

req.
POST
age: int
salary: int
name: str
auth_token

Resp.
{'name': name,
 'age':age,
 'salary': salary,
 'family':{'children':[['Alex', 24],['Kate', 12]],
 'u_salary_1.5_year': salary * 4}
  }

Тесты:
1) Статус код 200
2) Проверка структуры json в ответе.
3) Проверить что занчение поля name = значению переменной name из окружения
pm.environment.set("name_get_user", jsonData.name);
let name_1  = pm.environment.get("name_get_user");

pm.test("Your test name", function () {
    pm.expect(request.data.name).to.eql(name_1);
});

4) Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age
let age = jsonData.age
pm.test("Your age", function () {
    pm.expect(request.data.age).to.eql(age);
});

===================

6) http://162.55.220.72:5005/currency

req.
POST
auth_token

Resp. Передаётся список массив объектов.
[
{"Cur_Abbreviation": str,
 "Cur_ID": int,
 "Cur_Name": str
}
…
{"Cur_Abbreviation": str,
 "Cur_ID": int,
 "Cur_Name": str
}
]

Тесты:
1) Можете взять любой объект из присланного списка, используйте js random.
В объекте возьмите Cur_ID и передать через окружение в следующий запрос.
let i=jsonData.length
console.log("i =  ", i);
function getRandomInt (i) {
    return Math.floor(Math.random() * i);
}
let rand_int = getRandomInt(i);
let response_item = jsonData[rand_int];
//console.log(jsonData[getRandomInt(i)]);
//console.log(jsonData[getRandomInt(1).Cur_ID]);
pm.environment.set("Curr_ID", response_item.Cur_ID);

 ===================




7) http://162.55.220.72:5005/curr_byn

req.
POST
auth_token
curr_code: int

Resp.
{
    "Cur_Abbreviation": str
    "Cur_ID": int,
    "Cur_Name": str,
    "Cur_OfficialRate": float,
    "Cur_Scale": int,
    "Date": str
}

Тесты:
1) Статус код 200
2) Проверка структуры json в ответе.


===============


